# -*- coding: utf-8 -*-
"""M20CS015.ipynb

Automatically generated by Colaboratory.

Original file is located at
    https://colab.research.google.com/drive/1ofI3jcLpNLKu3CajIF8IHDMHkzCLetsw

# Shristy Gupta M20CS015
"""

# Commented out IPython magic to ensure Python compatibility.
# %matplotlib inline

"""
# Rescale, resize, and downscale

`Rescale` operation resizes an image by a given scaling factor. The scaling
factor can either be a single floating point value, or multiple values - one
along each axis.

`Resize` serves the same purpose, but allows to specify an output image shape
instead of a scaling factor.

Note that when down-sampling an image, `resize` and `rescale` should perform
Gaussian smoothing to avoid aliasing artifacts. See the `anti_aliasing` and
`anti_aliasing_sigma` arguments to these functions.

`Downscale` serves the purpose of down-sampling an n-dimensional image by
integer factors using the local mean on the elements of each block of the size
factors given as a parameter to the function.
"""

import matplotlib.pyplot as plt
import numpy as np
from skimage import data, color
from skimage.transform import rescale, resize, downscale_local_mean
from sklearn.datasets import load_digits
digits = load_digits()
plt.figure(figsize=(8,4))
for index, (image, label) in enumerate(zip(digits.data[0:5], digits.target[0:5])):
 plt.subplot(1, 5, index + 1)
 plt.imshow(np.reshape(image, (8,8)), cmap=plt.cm.gray)
 plt.title('Original: %i\n' % label, fontsize = 20)
 
 #print(data.astronaut())
#  model = color.rgb2gray(data.astronaut())
 model=image.reshape(8,8)
 image_rescaled = rescale(model, 0.25, anti_aliasing=False)
 image_resized = resize(model, (model.shape[0] // 4, model.shape[1] // 4),anti_aliasing=True)
 image_downscaled = downscale_local_mean(model, (4, 4))
 fig, axes = plt.subplots(nrows=1, ncols=3)
 ax = axes.ravel()
 ax[0].imshow(image_rescaled, cmap='gray')
 ax[0].set_title("Rescaled image")

 ax[1].imshow(image_resized, cmap='gray')
 ax[1].set_title("Resized image")

 ax[2].imshow(image_downscaled, cmap='gray')
 ax[2].set_title("Downscaled image")
#  ax[0].set_xlim(0, 512)
#  ax[0].set_ylim(512, 0)
 plt.tight_layout()
 plt.show()